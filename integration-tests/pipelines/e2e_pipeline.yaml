---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: provision-cluster
spec:
  description: |
    An integration test which provisions an ephemeral Hypershift cluster.
  params:
    - description: Snapshot of the application
      name: SNAPSHOT
      default: '{"components": [{"name":"test-app", "containerImage": "quay.io/example/repo:latest"}]}'
      type: string
    - name: oci-container-repo
      default: 'quay.io/konflux-test-storage/quality-camp/k8s-demo'
      description: The ORAS container used to store all test artifacts.
  tasks:
    - name: create-oci-container
      taskRef:
        resolver: git
        params:
          - name: url
            value: https://github.com/konflux-ci/konflux-qe-definitions.git
          - name: revision
            value: main
          - name: pathInRepo
            value: common/tasks/create-oci-artifact/0.1/create-oci-artifact.yaml
      params:
        - name: oci-container-repo
          value: $(params.oci-container-repo)
        - name: oci-container-tag
          value: $(context.pipelineRun.name)
    - name: test-metadata
      taskRef:
        resolver: git
        params:
          - name: url
            value: https://github.com/konflux-ci/konflux-qe-definitions.git
          - name: revision
            value: main
          - name: pathInRepo
            value: common/tasks/test-metadata/0.1/test-metadata.yaml
      params:
        - name: SNAPSHOT
          value: $(params.SNAPSHOT)
        - name: test-name
          value: $(context.pipelineRun.name)
    - name: provision-eaas-space
      runAfter:
        - create-oci-container
        - test-metadata
      taskRef:
        resolver: git
        params:
          - name: url
            value: https://github.com/konflux-ci/build-definitions.git
          - name: revision
            value: main
          - name: pathInRepo
            value: task/eaas-provision-space/0.1/eaas-provision-space.yaml
      params:
        - name: ownerName
          value: $(context.pipelineRun.name)
        - name: ownerUid
          value: $(context.pipelineRun.uid)
    - name: provision-cluster
      runAfter:
        - provision-eaas-space
      taskSpec:
        results:
          - name: clusterName
            value: "$(steps.create-cluster.results.clusterName)"
        volumes:
          - name: credentials
            emptyDir: {}
        steps:
          - name: get-supported-versions
            ref:
              resolver: git
              params:
                - name: url
                  value: https://github.com/konflux-ci/build-definitions.git
                - name: revision
                  value: main
                - name: pathInRepo
                  value: stepactions/eaas-get-supported-ephemeral-cluster-versions/0.1/eaas-get-supported-ephemeral-cluster-versions.yaml
            params:
              - name: eaasSpaceSecretRef
                value: $(tasks.provision-eaas-space.results.secretRef)
          - name: pick-version
            ref:
              resolver: git
              params:
                - name: url
                  value: https://github.com/konflux-ci/build-definitions.git
                - name: revision
                  value: main
                - name: pathInRepo
                  value: stepactions/eaas-get-latest-openshift-version-by-prefix/0.1/eaas-get-latest-openshift-version-by-prefix.yaml
            params:
              - name: prefix
                value: "4.15"
          - name: create-cluster
            ref:
              resolver: git
              params:
                - name: url
                  value: https://github.com/konflux-ci/build-definitions.git
                - name: revision
                  value: main
                - name: pathInRepo
                  value: stepactions/eaas-create-ephemeral-cluster-hypershift-aws/0.1/eaas-create-ephemeral-cluster-hypershift-aws.yaml
            params:
              - name: eaasSpaceSecretRef
                value: $(tasks.provision-eaas-space.results.secretRef)
              - name: version
                value: "$(steps.pick-version.results.version)"
    - name: konflux-e2e
      runAfter:
        - provision-cluster
      taskSpec:
        volumes:
          - name: credentials
            emptyDir: {}
          - name: quay-secret-volume
            secret:
              secretName: quay-io-secret
        steps:
          - name: get-kubeconfig
            ref:
              resolver: git
              params:
                - name: url
                  value: https://github.com/konflux-ci/build-definitions.git
                - name: revision
                  value: main
                - name: pathInRepo
                  value: stepactions/eaas-get-ephemeral-cluster-credentials/0.1/eaas-get-ephemeral-cluster-credentials.yaml
            params:
              - name: eaasSpaceSecretRef
                value: $(tasks.provision-eaas-space.results.secretRef)
              - name: clusterName
                value: "$(tasks.provision-cluster.results.clusterName)"
              - name: credentials
                value: credentials
          - name: e2e-test
            image: golang:1.22
            volumeMounts:
              - name: quay-secret-volume
                mountPath: /usr/local/quay-io-secret
            workingDir: /workspace
            env:
              - name: JOB_NAME
                value: $(context.pipelineRun.name)
              - name: KUBECONFIG
                value: "/credentials/$(steps.get-kubeconfig.results.kubeconfig)"
            script: |
              export GOBIN=$GOPATH/bin
              export ORAS_CONTAINER=$(tasks.create-oci-container.results.oci-container)
              export ARTIFACT_DIR="/workspace/artifacts"
              export OCI_STORAGE_USERNAME="/usr/local/quay-io-secret/quay-username"
              export OCI_STORAGE_TOKEN="/usr/local/quay-io-secret/quay-token"

              # Ensure ARTIFACT_DIR exists
              mkdir -p "$ARTIFACT_DIR"

              post_actions() {
                  local exit_code=$?
                  local temp_annotation_file="$(mktemp)"

                  cd "$ARTIFACT_DIR"

                  # Fetch the manifest annotations for the container
                  if ! MANIFESTS=$(oras manifest fetch "${ORAS_CONTAINER}" | jq .annotations); then
                      echo -e "Failed to fetch manifest from ${ORAS_CONTAINER}"
                      exit 1
                  fi

                  jq -n --argjson manifest "$MANIFESTS" '{ "$manifest": $manifest }' > "${temp_annotation_file}"

                  oras pull "${ORAS_CONTAINER}"

                  local attempt=1
                  while ! oras push "$ORAS_CONTAINER" --username="${OCI_STORAGE_USERNAME}" --password="${OCI_STORAGE_TOKEN}" --annotation-file "${temp_annotation_file}" ./:application/vnd.acme.rocket.docs.layer.v1+tar; do
                      if [[ $attempt -ge 5 ]]; then
                          echo - "oras push failed after $attempt attempts."
                          exit 1
                      fi
                      echo -e "oras push failed (attempt $attempt). Retrying in 5 seconds..."
                      sleep 5
                      ((attempt++))
                  done

                  exit "$exit_code"
              }

              trap post_actions EXIT

              VERSION="1.2.0"
              curl -LO "https://github.com/oras-project/oras/releases/download/v${VERSION}/oras_${VERSION}_linux_amd64.tar.gz"
              mkdir -p oras-install/
              tar -zxf oras_${VERSION}_*.tar.gz -C oras-install/
              mv oras-install/oras $GOPATH/bin
              rm -rf oras_${VERSION}_*.tar.gz oras-install/

              curl -L "https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64" -o $GOPATH/bin/jq
              chmod +x $GOPATH/bin/jq
              jq --version
              oras version

              go install github.com/onsi/ginkgo/v2/ginkgo@latest
              git clone -b appstudio-k8s-namespace-creator https://github.com/konflux-ci-samples/k8s-namespace-creator .
              ginkgo --junit-report "$ARTIFACT_DIR"/junit_sample.xml
  finally:
    - name: grab-artifacts-final
      taskSpec:
        volumes:
          - name: credentials
            emptyDir: {}
          - name: konflux-test-infra-volume
            secret:
              secretName: konflux-test-infra
        steps:
          - name: get-kubeconfig
            ref:
              resolver: git
              params:
                - name: url
                  value: https://github.com/konflux-ci/build-definitions.git
                - name: revision
                  value: main
                - name: pathInRepo
                  value: stepactions/eaas-get-ephemeral-cluster-credentials/0.1/eaas-get-ephemeral-cluster-credentials.yaml
            params:
              - name: eaasSpaceSecretRef
                value: $(tasks.provision-eaas-space.results.secretRef)
              - name: clusterName
                value: "$(tasks.provision-cluster.results.clusterName)"
              - name: credentials
                value: credentials
          - name: e2e-test
            image: golang:1.22
            volumeMounts:
              - name: credentials
                mountPath: /credentials
              - name: artifacts
                mountPath: /artifacts
              - name: konflux-test-infra-volume
                mountPath: /usr/local/konflux-test-infra
            workingDir: /workspace
            env:
              - name: JOB_NAME
                value: $(context.pipelineRun.name)
              - name: KUBECONFIG
                value: "/credentials/$(steps.get-kubeconfig.results.kubeconfig)"
            script: |
              ls -larth /artifacts